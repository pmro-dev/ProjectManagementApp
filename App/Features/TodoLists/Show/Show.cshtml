@using App.Common
@using App.Common.Helpers
@using App.Features.Tasks.Common.Models
@using App.Features.TodoLists.Show;
@using App.Features.TodoLists.Show.Models;
@using App.Features.Pagination;
@using App.Features.TodoLists.Common.Helpers;
@model TodoListDetailsOutputVM

@{
	ViewData[TodoListViewData.ViewTitleKey] = "Details";
	DateTime? filterDueDate = Model.FilterDueDate;
	Layout = SharedViews.DefaultLayout;

	PaginationData paginData = Model.PaginData;
	FilterDueDatePanelModel filterDueDatePanelData = new(
		Model.Id,
		filterDueDate,
		TodoListCtrl.Name,
		TodoListCtrl.ShowAction,
		paginData.CurrentPageNumber,
		paginData.ItemsPerPageCount);

	bool AreThereCompletedTasks = Model != null && Model.TasksCompletedCount > 0;
	bool AreThereExpiredTasks = Model != null && Model.TasksExpiredCount > 0;
	bool AreThereForTodayTasks = Model != null && Model.TasksForTodayCount > 0;

	IEnumerable<TaskDto>? completedTasks = Model?.TasksCompleted;
	IEnumerable<TaskDto>? expiredTasks = Model?.TasksExpired;
	IEnumerable<TaskDto>? tasksNotCompleted = Model?.TasksNotCompleted;
	IEnumerable<TaskDto>? tasksForToday = Model?.TasksForToday;
	string tableTitleForCompleted = "Tasks Completed";
	string tableTitleForExpired = "Tasks Expired!";
	string tableTitleForNotStarted = "Tasks Not Started & In Progress";
	string tableTitleForToday = "Tasks For Today";
	string reminderNotNull = "IamNotNull";
}

<div>
	<div class="col-sm-2">
		<h4>@Html.DisplayNameFor(model => model.Name)</h4>
	</div>
	<div class="col-sm-8">
		<h4>@Html.DisplayFor(model => model.Name)</h4>
	</div>
	<dl class="row">
		<dd class="col-sm-5">
			<a asp-action=@TaskCtrl.CreateAction asp-controller=@TaskCtrl.Name asp-route-id="@Model?.Id" method="get" class="btn" style="background-color: #671dff; color: white; font-weight: 500;">New Task</a>
			<a asp-action=@TodoListCtrl.EditAction asp-controller=@TodoListCtrl.Name asp-route-id="@Model?.Id" class="btn btn-warning">Edit</a>
			<a asp-action=@BoardsCtrl.BrieflyAction asp-controller="@BoardsCtrl.Name" class="btn btn-primary">Back</a>
		</dd>
	</dl>


	<partial name="@SharedViews.ItemsPerPagePanel" controller="@TodoListCtrl.Name" action="@TodoListCtrl.ShowAction" />


	@{
		if (AreThereForTodayTasks)
			await ShowTasksAsync(tableTitleForToday, tasksForToday);
	}


	<partial name="@SharedViews.FilterDueDatePanel" model="@filterDueDatePanelData" />


	@{
		ViewData[TodoListViewData.SetClassReminderKey] = reminderNotNull;
		await ShowTasksAsync(tableTitleForNotStarted, tasksNotCompleted);

		if (AreThereCompletedTasks)
			await ShowTasksAsync(tableTitleForCompleted, completedTasks);

		if (AreThereExpiredTasks)
			await ShowTasksAsync(tableTitleForExpired, expiredTasks);
	}

</div>


@if (paginData.AreTherePagesToShow)
{
	var paginationPanel = new PaginationPanel(paginData, TodoListCtrl.Name, TodoListCtrl.ShowAction);
	<partial name="@SharedViews.PaginationPanel" model="@paginationPanel" />
}


@{
	async Task ShowTasksAsync(string tableTitle, IEnumerable<TaskDto>? tasksSource)
	{
		ViewData[TodoListViewData.SetClassReminderKey] = null;
		ViewData[TodoListViewData.TableTitleKey] = tableTitle;
		<partial name=@SharedViews.TodoListTable model="@tasksSource" view-data="ViewData" />
	}
}


@section Scripts {
	@{
		await Html.RenderPartialAsync(SharedViews.ValidationPartial);
	}
}