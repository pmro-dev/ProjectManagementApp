@using App.Common.Helpers
@using App.Features.Pagination;

@model PaginationPanel

@{
	PaginationData paginData = Model.PaginData;
	string controllerName = Model.ControllerName;
	string actionName = Model.ActionName;
	string? filterDueDateValue = paginData.FilterDueDate?.ToString(AttributesHelper.DataFormat);
	int itemsPerPage = paginData.ItemsPerPageCount;
	int previousPageNumber = paginData.PreviousPageNumber;
	int nextPageNumber = paginData.NextPageNumber;
	string buttonTextPrevious = "Previous";
	string buttonTextNext = "Next";
}

<p>
	<nav aria-label="...">
		<ul class="pagination">

			@if (paginData.IsNotCurrentPageFirstPage)
			{
				await ShowButtonAsync(previousPageNumber, itemsPerPage, filterDueDateValue, buttonTextPrevious);
				await ShowButtonAsync(previousPageNumber, itemsPerPage, filterDueDateValue, previousPageNumber.ToString());
			}

			<li class="page-item active">
				<span class="page-link">
					@paginData.CurrentPageNumber
				</span>
			</li>

			@if (paginData.IsThereNextPage)
			{
				await ShowButtonAsync(nextPageNumber, itemsPerPage, filterDueDateValue, nextPageNumber.ToString());
				await ShowButtonAsync(nextPageNumber, itemsPerPage, filterDueDateValue, buttonTextNext);
			}

		</ul>
	</nav>
</p>


@{
	async Task ShowButtonAsync(int pageNumber, int itemsPerPageCount, string? filterDueDate, string buttonValue)
	{
		<li class="page-item">
			<a class="page-link"
			   asp-controller="@controllerName"
			   asp-action="@actionName"
			   asp-route-pageNumber="@pageNumber"
			   asp-route-itemsPerPageCount="@itemsPerPageCount"
			   asp-route-filterDueDate="@filterDueDate">
				@buttonValue
			</a>
		</li>
	}
}